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

#include <fstream>
#include <iostream>
#include <sstream>
#include <vector>
using namespace std;


struct MVector3
{
    float x;
    float y;
    float z;
};
struct MVector2
{
    float x;
    float y;
};
struct MMesh
{
    std::vector<MVector3> allV;
    std::vector<MVector3> allVN;
    std::vector<MVector3> allVT;
};

typedef vector<vector<MVector3>> ref;
float stringToNum(const string &str)
{
    istringstream iss(str);
    float num;
    iss >> num;
    return num;
}

int stringToNumI(const string &str)
{
    istringstream iss(str);
    int num;
    iss >> num;
    return num;
}
void cutFaceArr(string word, int &id1, int &id2, int &id3)
{
    int firstcut = 0, secondcut = 0;
    int cuttime = 0;
    for (int i = 0; i < word.size(); i++)
    {
        if (word[i] == '/')
        {
            if (cuttime == 0)
            {
                firstcut = i;
                cuttime++;
            }
            else
            {
                secondcut = i;
                break;
            }
        }
    }
    id1 = stringToNumI(word.substr(0, firstcut - 1));
    id2 = stringToNumI(word.substr(firstcut + 1, secondcut - 1));
    id3 = stringToNumI(word.substr(secondcut + 1, word.size() - 1));
}
bool Myloader(string filename, MMesh &mesh, vector<vector<MVector3>> &refer)
{
    ifstream input;
    string sentence, word;
    string title;
    input.open(filename.c_str(), ios::in);
    if (input.is_open())
    {
        while (getline(input, sentence))
        {
            // In a line
            istringstream is(sentence);
            MVector3 v3;
            is >> title;
            if (title == "#")
                continue;
            if (title == "v" || title == "vn" || title == "vt")
            {
                is >> word;
                v3.x = stringToNum(word);
                is >> word;
                v3.y = stringToNum(word);
                is >> word;
                v3.z = stringToNum(word);
            }
            else
            {
                if (title == "f")
                {
                    vector<MVector3> curRefLine;
                    for (int i = 0; i < 3; i++)
                    {

                        is >> word;
                        int id1, id2, id3;
                        cutFaceArr(word, id1, id2, id3);
                        v3.x = id1;
                        v3.y = id2;
                        v3.z = id3;
                        curRefLine.push_back(v3);
                    }
                    refer.push_back(curRefLine);
                }
                else
                    continue;
            }

            if (title == "v")
            {
                mesh.allV.push_back(v3);
            }
            if (title == "vn")
            {
                mesh.allVN.push_back(v3);
            }
            if (title == "vt")
            {
                mesh.allVT.push_back(v3);
            }
        }
        return true;
    }
    else
    {
        cout << "Error!Cannot open file:" << filename << endl;
        return false;
    }
    input.close();
}

